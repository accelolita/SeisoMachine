
SeisoMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000452  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000452  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000998  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000531  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000410  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000132  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000020f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  9e:	0c 94 27 02 	jmp	0x44e	; 0x44e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SendCommand>:
char volumeFlag=0;
unsigned volume=17;
uint16_t btnStatus=0x0000;
uint16_t btnStatusBefore=0x0000;

void SendCommand(char* str,unsigned char num){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	dc 01       	movw	r26, r24
	for (char i=0;i<num;i++)
  ac:	66 23       	and	r22, r22
  ae:	99 f0       	breq	.+38     	; 0xd6 <SendCommand+0x30>
  b0:	61 50       	subi	r22, 0x01	; 1
  b2:	26 2f       	mov	r18, r22
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 0f       	add	r18, r24
  bc:	39 1f       	adc	r19, r25
	{
		while(!(UCSR0A & 0b00100000));
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=*str;
  c2:	c6 ec       	ldi	r28, 0xC6	; 198
  c4:	d0 e0       	ldi	r29, 0x00	; 0
uint16_t btnStatusBefore=0x0000;

void SendCommand(char* str,unsigned char num){
	for (char i=0;i<num;i++)
	{
		while(!(UCSR0A & 0b00100000));
  c6:	90 81       	ld	r25, Z
  c8:	95 ff       	sbrs	r25, 5
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <SendCommand+0x20>
		UDR0=*str;
  cc:	8d 91       	ld	r24, X+
  ce:	88 83       	st	Y, r24
unsigned volume=17;
uint16_t btnStatus=0x0000;
uint16_t btnStatusBefore=0x0000;

void SendCommand(char* str,unsigned char num){
	for (char i=0;i<num;i++)
  d0:	a2 17       	cp	r26, r18
  d2:	b3 07       	cpc	r27, r19
  d4:	c1 f7       	brne	.-16     	; 0xc6 <SendCommand+0x20>
	{
		while(!(UCSR0A & 0b00100000));
		UDR0=*str;
		str++;
	}
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <PlaySound>:
		firstFlag=0;
		return;
	}
	*/
	
	if ((~PIND) & (1<<7))
  dc:	4f 99       	sbic	0x09, 7	; 9
  de:	02 c0       	rjmp	.+4      	; 0xe4 <PlaySound+0x8>
	{
		x+=10;
  e0:	0a 96       	adiw	r24, 0x0a	; 10
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <PlaySound+0xc>
	}
	else if ((~PINB) & (1<<0))
  e4:	18 9b       	sbis	0x03, 0	; 3
	{
		x+=20;	
  e6:	44 96       	adiw	r24, 0x14	; 20
	}
	dfCommand[5]=(char)(x>>8);
  e8:	e2 e0       	ldi	r30, 0x02	; 2
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	95 83       	std	Z+5, r25	; 0x05
	dfCommand[6]=(char)(x & 0xFF);	
  ee:	86 83       	std	Z+6, r24	; 0x06
	SendCommand(&dfCommand[0],(unsigned char)0x08);	
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	cf 01       	movw	r24, r30
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <SendCommand>
  f8:	08 95       	ret

000000fa <main>:
int main(void)
{
    /* Replace with your application code */
	
	//シリアル
	UBRR0H=0;
  fa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L=51;//9615bps
  fe:	83 e3       	ldi	r24, 0x33	; 51
 100:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	//UDR0	データレジスタ
	UCSR0A=0b00000000;	//5bit 送信可能フラグ
 104:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B=0b00011000;	//送受信機能しよう
 108:	88 e1       	ldi	r24, 0x18	; 24
 10a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C=0b00000110;	//データ8ビット　stop 1bit パリティなし 非同期
 10e:	96 e0       	ldi	r25, 0x06	; 6
 110:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	

		
	DDRC&=0xF0;//GPIO準備
 114:	87 b1       	in	r24, 0x07	; 7
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	87 b9       	out	0x07, r24	; 7
	PORTC|=0x0F;
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	8f 60       	ori	r24, 0x0F	; 15
 11e:	88 b9       	out	0x08, r24	; 8
	DDRB&= 0b00111100;
 120:	84 b1       	in	r24, 0x04	; 4
 122:	8c 73       	andi	r24, 0x3C	; 60
 124:	84 b9       	out	0x04, r24	; 4
	PORTB|=0b11000011;
 126:	85 b1       	in	r24, 0x05	; 5
 128:	83 6c       	ori	r24, 0xC3	; 195
 12a:	85 b9       	out	0x05, r24	; 5
	DDRD&= 0b01100011;
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	83 76       	andi	r24, 0x63	; 99
 130:	8a b9       	out	0x0a, r24	; 10
	PORTD|=0b10011100;
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	8c 69       	ori	r24, 0x9C	; 156
 136:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	34 e3       	ldi	r19, 0x34	; 52
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	30 40       	sbci	r19, 0x00	; 0
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x44>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x4e>
 148:	00 00       	nop
	
	_delay_ms(500);//待機	
	
	dfCommand[3]=0x06;
 14a:	c2 e0       	ldi	r28, 0x02	; 2
 14c:	d1 e0       	ldi	r29, 0x01	; 1
 14e:	9b 83       	std	Y+3, r25	; 0x03
	dfCommand[6]=volume;
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 154:	8e 83       	std	Y+6, r24	; 0x06
	SendCommand(&dfCommand[0],(unsigned char)0x08);//音量25
 156:	68 e0       	ldi	r22, 0x08	; 8
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <SendCommand>
	dfCommand[3]=0x03;
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	8b 83       	std	Y+3, r24	; 0x03
	dfCommand[6]=0x01;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	8e 83       	std	Y+6, r24	; 0x06
		{
			volumeFlag=2;
		}
		else if (((~PINB) & (1<<0)) && volumeFlag==0)//音量アップ
		{
			volumeFlag=1;
 166:	cc 24       	eor	r12, r12
 168:	c3 94       	inc	r12
			volumeFlag=0;
		}
		//音量ボタンフラグ
		if (((~PIND) & (1<<7)) && volumeFlag==0)//音量ダウン
		{
			volumeFlag=2;
 16a:	68 94       	set
 16c:	dd 24       	eor	r13, r13
 16e:	d1 f8       	bld	r13, 1
		//音量下げ
		if (volumeFlag==2 && ((PIND) & (1<<7)) && ((PINB) & (1<<0)))
		{
			volume--;
			if(volume<1) volume=1;
			dfCommand[3]=0x06;
 170:	0f 2e       	mov	r0, r31
 172:	f6 e0       	ldi	r31, 0x06	; 6
 174:	af 2e       	mov	r10, r31
 176:	f0 2d       	mov	r31, r0
			dfCommand[6]=volume;
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	11 e0       	ldi	r17, 0x01	; 1
			SendCommand(&dfCommand[0],(unsigned char)0x08);
			dfCommand[3]=0x03;
 17c:	0f 2e       	mov	r0, r31
 17e:	f3 e0       	ldi	r31, 0x03	; 3
 180:	bf 2e       	mov	r11, r31
 182:	f0 2d       	mov	r31, r0
		
		//音量上げ
		if (volumeFlag==1 && ((PIND) & (1<<7)) && ((PINB) & (1<<0)))
		{
			volume++;
			if(volume>30) volume=30;
 184:	0f 2e       	mov	r0, r31
 186:	fe e1       	ldi	r31, 0x1E	; 30
 188:	ef 2e       	mov	r14, r31
 18a:	f1 2c       	mov	r15, r1
 18c:	f0 2d       	mov	r31, r0
	
	
    while (1) 
    {
		
		if ((~PINC) & (1<<3))//PC3
 18e:	33 99       	sbic	0x06, 3	; 6
 190:	0e c0       	rjmp	.+28     	; 0x1ae <main+0xb4>
		{
			PlaySound(1);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<0;
 19a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 19e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 1a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <main+0xc6>
		}
		else btnStatusBefore&=~(1<<0);
 1ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1b2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
		if ((~PINC) & (1<<2))
 1c0:	32 99       	sbic	0x06, 2	; 6
 1c2:	0e c0       	rjmp	.+28     	; 0x1e0 <main+0xe6>
		{
			PlaySound(2);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<1;
 1cc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 1d0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 1da:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <main+0xf8>
		}
		else btnStatusBefore&=~(1<<1);
 1e0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1e4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1e8:	8d 7f       	andi	r24, 0xFD	; 253
 1ea:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1ee:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
		if ((~PINC) & (1<<1))
 1f2:	31 99       	sbic	0x06, 1	; 6
 1f4:	0e c0       	rjmp	.+28     	; 0x212 <main+0x118>
		{
			PlaySound(3);
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<2;
 1fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 202:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 206:	84 60       	ori	r24, 0x04	; 4
 208:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 20c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 210:	09 c0       	rjmp	.+18     	; 0x224 <main+0x12a>
		}
		else btnStatusBefore&=~(1<<2);
 212:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 216:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 220:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
		if ((~PINC) & (1<<0))
 224:	30 99       	sbic	0x06, 0	; 6
 226:	0e c0       	rjmp	.+28     	; 0x244 <main+0x14a>
		{
			PlaySound(4);
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<3;
 230:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 234:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 23e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 242:	09 c0       	rjmp	.+18     	; 0x256 <main+0x15c>
		}
		else btnStatusBefore&=~(1<<3);
 244:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 248:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 24c:	87 7f       	andi	r24, 0xF7	; 247
 24e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 252:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
		if ((~PINB) & (1<<1))//PB1
 256:	19 99       	sbic	0x03, 1	; 3
 258:	0e c0       	rjmp	.+28     	; 0x276 <main+0x17c>
		{
			PlaySound(5);
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<4;
 262:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 266:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 26a:	80 61       	ori	r24, 0x10	; 16
 26c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 270:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 274:	09 c0       	rjmp	.+18     	; 0x288 <main+0x18e>
		}
		else btnStatusBefore&=~(1<<4);		
 276:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 27a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 27e:	8f 7e       	andi	r24, 0xEF	; 239
 280:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 284:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
		if ((~PIND) & (1<<2))//PD2
 288:	4a 99       	sbic	0x09, 2	; 9
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <main+0x1ae>
		{
			PlaySound(6);
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<5;
 294:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 298:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 2a2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <main+0x1c0>
		}
		else btnStatusBefore&=~(1<<5);		
 2a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2ac:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 2b6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
		if ((~PIND) & (1<<3))
 2ba:	4b 99       	sbic	0x09, 3	; 9
 2bc:	0e c0       	rjmp	.+28     	; 0x2da <main+0x1e0>
		{
			PlaySound(7);
 2be:	87 e0       	ldi	r24, 0x07	; 7
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<6;
 2c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 2ca:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 2d4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <main+0x1f2>
		}
		else btnStatusBefore&=~(1<<6);
 2da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2de:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 2e2:	8f 7b       	andi	r24, 0xBF	; 191
 2e4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 2e8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
		if ((~PIND) & (1<<4))
 2ec:	4c 99       	sbic	0x09, 4	; 9
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <main+0x212>
		{
			PlaySound(8);
 2f0:	88 e0       	ldi	r24, 0x08	; 8
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<7;
 2f8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 2fc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 300:	80 68       	ori	r24, 0x80	; 128
 302:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 306:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 30a:	09 c0       	rjmp	.+18     	; 0x31e <main+0x224>
		}
		else btnStatusBefore&=~(1<<7);	
 30c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 310:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 314:	8f 77       	andi	r24, 0x7F	; 127
 316:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 31a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
		if ((~PINB) & (1<<6))//PB6
 31e:	1e 99       	sbic	0x03, 6	; 3
 320:	0e c0       	rjmp	.+28     	; 0x33e <main+0x244>
		{
			PlaySound(9);
 322:	89 e0       	ldi	r24, 0x09	; 9
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<8;
 32a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 32e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 332:	91 60       	ori	r25, 0x01	; 1
 334:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 338:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 33c:	09 c0       	rjmp	.+18     	; 0x350 <main+0x256>
		}
		else btnStatusBefore&=~(1<<8);
 33e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 342:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 346:	9e 7f       	andi	r25, 0xFE	; 254
 348:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 34c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
		if ((~PINB) & (1<<7))
 350:	1f 99       	sbic	0x03, 7	; 3
 352:	0e c0       	rjmp	.+28     	; 0x370 <main+0x276>
		{
			PlaySound(10);
 354:	8a e0       	ldi	r24, 0x0A	; 10
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 6e 00 	call	0xdc	; 0xdc <PlaySound>
			btnStatus|=1<<9;
 35c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <btnStatus>
 360:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btnStatus+0x1>
 364:	92 60       	ori	r25, 0x02	; 2
 366:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <btnStatus+0x1>
 36a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <btnStatus>
 36e:	09 c0       	rjmp	.+18     	; 0x382 <main+0x288>
		}
		else btnStatusBefore&=~(1<<9);
 370:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 374:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 378:	9d 7f       	andi	r25, 0xFD	; 253
 37a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 37e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
		
		
		
		//音量上げ
		if (volumeFlag==1 && ((PIND) & (1<<7)) && ((PINB) & (1<<0)))
 382:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <volumeFlag>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	11 f5       	brne	.+68     	; 0x3ce <main+0x2d4>
 38a:	4f 9b       	sbis	0x09, 7	; 9
 38c:	46 c0       	rjmp	.+140    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 38e:	18 9b       	sbis	0x03, 0	; 3
 390:	44 c0       	rjmp	.+136    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			volume++;
 392:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 396:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 39a:	01 96       	adiw	r24, 0x01	; 1
			if(volume>30) volume=30;
 39c:	8f 31       	cpi	r24, 0x1F	; 31
 39e:	91 05       	cpc	r25, r1
 3a0:	28 f4       	brcc	.+10     	; 0x3ac <main+0x2b2>
		
		
		//音量上げ
		if (volumeFlag==1 && ((PIND) & (1<<7)) && ((PINB) & (1<<0)))
		{
			volume++;
 3a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <main+0x2ba>
			if(volume>30) volume=30;
 3ac:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__data_start+0x1>
 3b0:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__data_start>
			dfCommand[3]=0x06;
 3b4:	ab 82       	std	Y+3, r10	; 0x03
			dfCommand[6]=volume;
 3b6:	f8 01       	movw	r30, r16
 3b8:	80 81       	ld	r24, Z
 3ba:	8e 83       	std	Y+6, r24	; 0x06
			SendCommand(&dfCommand[0],(unsigned char)0x08);
 3bc:	68 e0       	ldi	r22, 0x08	; 8
 3be:	ce 01       	movw	r24, r28
 3c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SendCommand>
			dfCommand[3]=0x03;
 3c4:	bb 82       	std	Y+3, r11	; 0x03
			dfCommand[6]=0x01;
 3c6:	ce 82       	std	Y+6, r12	; 0x06
			
			volumeFlag=0;
 3c8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <volumeFlag>
 3cc:	26 c0       	rjmp	.+76     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}		
		//音量下げ
		if (volumeFlag==2 && ((PIND) & (1<<7)) && ((PINB) & (1<<0)))
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	21 f5       	brne	.+72     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3d2:	4f 9b       	sbis	0x09, 7	; 9
 3d4:	36 c0       	rjmp	.+108    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3d6:	18 9b       	sbis	0x03, 0	; 3
 3d8:	34 c0       	rjmp	.+104    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		{
			volume--;
 3da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3e2:	01 97       	sbiw	r24, 0x01	; 1
			if(volume<1) volume=1;
 3e4:	29 f0       	breq	.+10     	; 0x3f0 <main+0x2f6>
			volumeFlag=0;
		}		
		//音量下げ
		if (volumeFlag==2 && ((PIND) & (1<<7)) && ((PINB) & (1<<0)))
		{
			volume--;
 3e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3ee:	06 c0       	rjmp	.+12     	; 0x3fc <main+0x302>
			if(volume<1) volume=1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			dfCommand[3]=0x06;
 3fc:	ab 82       	std	Y+3, r10	; 0x03
			dfCommand[6]=volume;
 3fe:	f8 01       	movw	r30, r16
 400:	80 81       	ld	r24, Z
 402:	8e 83       	std	Y+6, r24	; 0x06
			SendCommand(&dfCommand[0],(unsigned char)0x08);
 404:	68 e0       	ldi	r22, 0x08	; 8
 406:	ce 01       	movw	r24, r28
 408:	0e 94 53 00 	call	0xa6	; 0xa6 <SendCommand>
			dfCommand[3]=0x03;
 40c:	bb 82       	std	Y+3, r11	; 0x03
			dfCommand[6]=0x01;
 40e:	ce 82       	std	Y+6, r12	; 0x06
					
			volumeFlag=0;
 410:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <volumeFlag>
		}
		//音量ボタンフラグ
		if (((~PIND) & (1<<7)) && volumeFlag==0)//音量ダウン
 414:	4f 9b       	sbis	0x09, 7	; 9
 416:	07 c0       	rjmp	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 418:	17 c0       	rjmp	.+46     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 41a:	4f 99       	sbic	0x09, 7	; 9
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <volumeFlag>
 422:	81 11       	cpse	r24, r1
 424:	0c c0       	rjmp	.+24     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			volumeFlag=2;
 426:	d0 92 0e 01 	sts	0x010E, r13	; 0x80010e <volumeFlag>
 42a:	b1 ce       	rjmp	.-670    	; 0x18e <main+0x94>
		}
		else if (((~PINB) & (1<<0)) && volumeFlag==0)//音量アップ
 42c:	18 99       	sbic	0x03, 0	; 3
 42e:	af ce       	rjmp	.-674    	; 0x18e <main+0x94>
 430:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <volumeFlag>
 434:	81 11       	cpse	r24, r1
 436:	ab ce       	rjmp	.-682    	; 0x18e <main+0x94>
		{
			volumeFlag=1;
 438:	c0 92 0e 01 	sts	0x010E, r12	; 0x80010e <volumeFlag>
 43c:	a8 ce       	rjmp	.-688    	; 0x18e <main+0x94>
		//音量ボタンフラグ
		if (((~PIND) & (1<<7)) && volumeFlag==0)//音量ダウン
		{
			volumeFlag=2;
		}
		else if (((~PINB) & (1<<0)) && volumeFlag==0)//音量アップ
 43e:	83 b1       	in	r24, 0x03	; 3
 440:	a6 ce       	rjmp	.-692    	; 0x18e <main+0x94>
			dfCommand[6]=0x01;
					
			volumeFlag=0;
		}
		//音量ボタンフラグ
		if (((~PIND) & (1<<7)) && volumeFlag==0)//音量ダウン
 442:	4f 9b       	sbis	0x09, 7	; 9
 444:	fc cf       	rjmp	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	f2 cf       	rjmp	.-28     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			volumeFlag=2;
		}
		else if (((~PINB) & (1<<0)) && volumeFlag==0)//音量アップ
 448:	18 9b       	sbis	0x03, 0	; 3
 44a:	f6 cf       	rjmp	.-20     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 44c:	a0 ce       	rjmp	.-704    	; 0x18e <main+0x94>

0000044e <_exit>:
 44e:	f8 94       	cli

00000450 <__stop_program>:
 450:	ff cf       	rjmp	.-2      	; 0x450 <__stop_program>
